input {
	beats {
		port => 5044
	}

	tcp {
		port => 5000
	}
}

filter {
	# Syslog
	if [fields][type] == "Syslog" {
		grok {
			match => [ "message", "%{MONTH:Month}\s\s%{INT:Day}\s%{TIME:Time}\s%{WORD:System}\s%{WORD:Username}\[%{INT:PID}].%{IPV4:src_ip}\s%{INT:src_port}\s%{IPV4:dst_ip}\s%{INT:dst_port}\sINFO\sCommand\sexecuted:\s(?<Command>.*)"]
		}
	}

#	# Suricata
#	if [fields][type] == "Suricata" {
#		date {
#			match => [ "timestamp", "ISO8601" ]
#		}
#		translate {
#			refresh_interval => 86400
#			field => "[alert][signature_id]"
#			destination => "[alert][cve_id]"
#			dictionary_path => "/etc/listbot/cve.yaml"
#		}
#	}

	# P0f
	if [fields][type] == "P0f" {
		date {
			match => [ "timestamp", "yyyy'/'MM'/'dd HH:mm:ss" ]
			remove_field => ["timestamp"]
		}
		mutate {
			rename => {
				"server_port" => "dest_port"
				"server_ip" => "dest_ip"
				"client_port" => "src_port"
				"client_ip" => "src_ip"
			}
		}
	}

	# Ciscoasa
	if [fields][type] == "Ciscoasa" {
		kv {
			remove_char_key => " '{}"
			remove_char_value => "'{}"
			value_split => ":"
			field_split => ","
		}
		date {
			match => [ "timestamp", "ISO8601" ]
		}
	}

	# Conpot
	if [fields][type] == "ConPot" {
		date {
			match => [ "timestamp", "ISO8601" ]
		}
		mutate {
			rename => {
				"dst_port" => "dest_port"
				"dst_ip" => "dest_ip"
			}
		}
	}

	# Cowrie
	if [fields][type] == "Cowrie" {
		date {
			match => [ "timestamp", "ISO8601" ]
		}
		mutate {
			rename => {
				"dst_port" => "dest_port"
				"dst_ip" => "dest_ip"
			}
		}
	}

	# Dionaea
	if [fields][type] == "Dionaea" {
		date {
			match => [ "timestamp", "ISO8601" ]
		}
		mutate {
			rename => {
				"dst_port" => "dest_port"
				"dst_ip" => "dest_ip"
			}
			gsub => [
			"src_ip", "::ffff:", "",
			"dest_ip", "::ffff:", ""
			]
		}
		if [credentials] {
			mutate {
				add_field => {
					"username" => "%{[credentials][username]}"
					"password" => "%{[credentials][password]}"
				}
				remove_field => "[credentials]"
			}
		}
	}

	# ElasticPot
	if [fields][type] == "ElasticPot" {
		date {
			match => [ "timestamp", "ISO8601" ]
		}
	}

	# Glastopf
	if [fields][type] == "Glastopf" {
		grok {
			match => [ "message", "\A%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{NOTSPACE}%{SPACE}%{IP:src_ip}%{SPACE}%{WORD}%{SPACE}%{URIPROTO:http_method}%{SPACE}%{NOTSPACE:http_uri}%{SPACE}%{NOTSPACE}%{SPACE}%{HOSTNAME}:%{NUMBER:dest_port:integer}" ]
		}
		date {
			match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
			remove_field => ["timestamp"]
		}
	}

	# Glutton
	if [fields][type] == "Glutton" {
		date {
			match => [ "ts", "UNIX" ]
			remove_field => ["ts"]
		}
	}

	# Heralding
	if [fields][type] == "Heralding" {
		csv {
			columns => ["timestamp","auth_id","session_id","src_ip","src_port","dest_ip","dest_port","proto","username","password"] separator => ","
		}
		date {
			match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSSSSS" ]
			remove_field => ["timestamp"]
		}
	}

	# Honeytrap
	if [fields][type] == "Honeytrap" {
		date {
			match => [ "timestamp", "ISO8601" ]
		}
		mutate {
			rename => {
				"[attack_connection][local_port]" => "dest_port"
				"[attack_connection][local_ip]" => "dest_ip"
				"[attack_connection][remote_port]" => "src_port"
				"[attack_connection][remote_ip]" => "src_ip"
			}
		}
	}

	# Mailoney
	if [fields][type] == "Mailoney" {
		grok {
			match => [ "message", "\A%{NAGIOSTIME}\[%{IPV4:src_ip}:%{INT:src_port:integer}] %{GREEDYDATA:smtp_input}" ]
		}
		mutate {
			add_field => {
				"dest_port" => "25"
			}
		}
		date {
			match => [ "nagios_epoch", "UNIX" ]
			remove_field => ["nagios_epoch"]
		}
	}

	# Medpot
	if [fields][type] == "Medpot" {
		mutate {
			add_field => {
				"dest_port" => "2575"
			}
		}
		date {
			match => [ "timestamp", "ISO8601" ]
		}
	}

	# Rdpy
	if [fields][type] == "Rdpy" {
		grok {
			match => {
				"message" => [ "\A%{TIMESTAMP_ISO8601:timestamp},domain:%{CISCO_REASON:domain},username:%{CISCO_REASON:username},password:%{CISCO_REASON:password},hostname:%{GREEDYDATA:hostname}", "\A%{TIMESTAMP_ISO8601:timestamp},Connection from %{IPV4:src_ip}:%{INT:src_port:integer}" ]
			}
	
		}
		date {
			match => [ "timestamp", "ISO8601" ]
			remove_field => ["timestamp"]
		}
		mutate {
			add_field => {
				"dest_port" => "3389"
			}
		}
	}

	# NGINX
	if [fields][type] == "NGINX" {
		date {
			match => [ "timestamp", "ISO8601" ]
		}
	}

	# Tanner
	if [fields][type] == "Tanner" {
		date {
			match => [ "timestamp", "ISO8601" ]
		}
		mutate {
			rename => {
				"[peer][ip]" => "src_ip"
				"[peer][port]" => "src_port"
			}
			add_field => {
				"dest_port" => "80"
			}
		}
	}

	# Drop if parse fails
	if "_grokparsefailure" in [tags] {
		drop {
		}

	}

#	# Add geo coordinates / ASN info / IP rep.
#	if [src_ip] {
#		geoip {
#			cache_size => 10000
#			source => "src_ip"
#			database => "/opt/logstash/vendor/bundle/jruby/2.3.0/gems/logstash-filter-geoip-5.0.3-java/vendor/GeoLite2-City.mmdb"
#		}
#		geoip {
#			cache_size => 10000
#			source => "src_ip"
#			database => "/opt/logstash/vendor/bundle/jruby/2.3.0/gems/logstash-filter-geoip-5.0.3-java/vendor/GeoLite2-ASN.mmdb"
#		}
#		translate {
#			refresh_interval => 86400
#			field => "src_ip"
#			destination => "ip_rep"
#			dictionary_path => "/etc/listbot/iprep.yaml"
#		}
#	}

	# In some rare conditions dest_port, src_port, status are indexed as string, forcing integer for now
	if [dest_port] {
		mutate {
			convert => {
				"dest_port" => "integer"
			}
		}
	}
	if [src_port] {
		mutate {
			convert => {
				"src_port" => "integer"
			}
		}
	}
	if [status] {
		mutate {
			convert => {
				"status" => "integer"
			}
		}
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
		user => "elastic"
		password => "changeme"
		ecs_compatibility => disabled
	}

#	if [fields][type] == "Suricata" {
#		file {
#			file_mode => 0760
#			path => "/data/suricata/log/suricata_ews.log"
#		}
#	}
}
